from django.contrib.auth.backends import BaseBackend, ModelBackend
from django.contrib.auth import get_user_model
from django_otp.plugins.otp_email.models import EmailDevice
from django_otp import devices_for_user
from accounts.models import StudentUser, TeacherUser
from django.db.models import Q
from django.core.exceptions import ValidationError



class EmailBackend(BaseBackend):
    """
    Defines an email-based authentication backend for Django.

    EmailBackend:
        A custom authentication backend class that extends the `BaseBackend` class.
        It provides an implementation for the `authenticate` and `get_user` methods.

    authenticate:
        Authenticates a user based on their email and a one-time password (OTP) token.
        It returns the corresponding `User` object if the authentication is successful, or `None` otherwise.
        Parameters:
            - request: The HTTP request object passed to the authentication backend.
            - email: The email address of the user to authenticate.
            - otp_token: The OTP token generated by the user's authentication device.
        Raises:
            - None.

    get_user:
        Retrieves a `User` object based on its primary key (id).
        It returns the corresponding `User` object if it exists, or `None` otherwise.
        Parameters:
            - user_id: The primary key of the `User` object to retrieve.
        Raises:
            - None.
    """


    def authenticate(self, request, email=None, otp_token=None, **kwargs):
        UserModel = get_user_model()
        try:
            user = UserModel.objects.get(email=email)
            devices = devices_for_user(user)
            if not devices:
                return None
            for device in devices:
                if device.confirmed and device.verify_token(otp_token) and device.user == user:
                    return user
        except UserModel.DoesNotExist:
            return None

    def get_user(self, user_id):
        UserModel = get_user_model()
        try:
            return UserModel.objects.get(pk=user_id)
        except UserModel.DoesNotExist:
            return None


class TeacherAuthenticationBackend(ModelBackend):
    def authenticate(self, request, teacher_id=None, username=None, password=None, **kwargs):
        User = get_user_model()
        print(f"Teacher_ID from backend: {teacher_id}")
        print(f"Username from backend: {username}")
        print(f"Password from backend: {password}")
        try:
            teacher_user = TeacherUser.objects.get(teacher_id=teacher_id)
            print(teacher_user)
            user = teacher_user.user_field
            print(user)
        except User.DoesNotExist:
            return None

        if user.check_password(password):
            if teacher_user.teacher_id == teacher_id:
                return user
        return None
